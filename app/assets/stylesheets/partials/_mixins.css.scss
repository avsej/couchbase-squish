@mixin text-shadow($h: 2px, $v: 2px, $c: rgba( 10, 10, 10, .45), $b: 2px) {
  $value: $h $v $b $c;
  -moz-text-shadow: $value;
  -webkit-text-shadow: $value;
  -o-text-shadow: $value;
  text-shadow: $value;
}


@mixin box-shadow ($x, $y, $offset, $hex, $ie: $useIEFilters) {
  -moz-box-shadow: $x $y $offset $hex;
  -o-box-shadow: $x $y $offset $hex;
  -webkit-box-shadow: $x $y $offset $hex;
  box-shadow: $x $y $offset $hex;
  
  @if $ie == 1 {
    $iecolor: '#' + red($hex) + green($hex) + blue($hex);
    filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.dropshadow(OffX=#{$x}, OffY=#{$y}, Color='#{$iecolor}'));
  }
}


@mixin rgba($hex, $alpha, $ie: $useIEFilters) {     
  @if $ie == 1 { 
    // this formula is not accurate enough, will be fixed with sass 3.1
    $hexopac: '#' + ceil((($alpha * 255)/16) *10) + $hex;
    background-color: none;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}}');
    -ms-filter: quote(progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$hexopac}',EndColorStr='#{$hexopac}'));
  }
  @else {
    background-color: $hex;
    background-color: rgba(red($hex), green($hex), blue($hex), $alpha);
  }
}

@mixin rotate ($deg, $ie: $useIEFilters) {
  -moz-transform: rotate(#{$deg}deg);
  -o-transform: rotate(#{$deg}deg);
  -webkit-transform: rotate(#{$deg}deg);
  // not ready, impediment: cos required!
  //@if $ie == 1 {
  //  filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=0.99144486137381, M12=--0.130526192220052, M21=0.130526192220052, M22=0.99144486137381);
  //  -ms-filter: quote(progid:DXImageTransform.Microsoft.Matrix(SizingMethod='auto expand', M11=0.99144486137381, M12=--0.130526192220052, M21=0.130526192220052, M22=0.99144486137381));
  //  zoom: 1;
  //}
}

@mixin transition ($value) {
  -moz-transition: $value;
  -o-transition: $value;
  -webkit-transition: $value;
  transition: $value;
}
// ==== /CSS3 SASS MIXINS ====


@mixin white-box-shadow {
  @include box-shadow(rgba(0,0,0,0.07), 0, 1px, 8px, 0); 
}


// mixins taken from bourbon github.com/thoughtbot/bourbon

@mixin position ($position: relative, $coordinates: 0 0 0 0) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if not(unitless($top)) {
    top: $top;
  }

  @if not(unitless($right)) {
    right: $right;
  }

  @if not(unitless($bottom)) {
    bottom: $bottom;
  }

  @if not(unitless($left)) {
    left: $left;
  }
}

@mixin border-radius ($radii) {
  -webkit-border-radius: $radii;
     -moz-border-radius: $radii;
      -ms-border-radius: $radii;
       -o-border-radius: $radii;
          border-radius: $radii;
}

@mixin transform($property: none) {
//  none | <transform-function>
  -webkit-transform: $property;
     -moz-transform: $property;
      -ms-transform: $property;
       -o-transform: $property;
          transform: $property;
}

@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  -webkit-transform-origin: $axes;
     -moz-transform-origin: $axes;
      -ms-transform-origin: $axes;
       -o-transform-origin: $axes;
          transform-origin: $axes;
}

// Requires Sass 3.1+
@mixin linear-gradient($pos, $G1, $G2: false,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: top; // Default position
  }

  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);

  background-color: nth($G1, 1);
  background-image: -webkit-gradient(linear, left top, left bottom, from($G1), to($G2)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient($pos, $full);
  background-image:    -moz-linear-gradient($pos, $full);
  background-image:     -ms-linear-gradient($pos, $full);
  background-image:      -o-linear-gradient($pos, $full);
  background-image:        unquote("linear-gradient(#{$pos}, #{$full})");
}

// Usage: Gradient position is optional, default is top. Position can be a degree. Color stops are optional as well.

// @include linear-gradient(#1e5799, #2989d8);
// @include linear-gradient(top, #1e5799 0%, #2989d8 50%);
// @include linear-gradient(50deg, rgba(10, 10, 10, 0.5) 0%, #2989d8 50%, #207cca 51%, #7db9e8 100%);


